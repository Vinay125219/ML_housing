version: '3.8'

services:
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: mlops-prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mlops-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mlops-grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    networks:
      - mlops-network
    depends_on:
      - prometheus

  # Data Loading Service
  data-loader:
    build: .
    container_name: mlops-data-loader
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - PYTHONPATH=/app
    command: python src/load_data.py
    networks:
      - mlops-network

  # Model Training Service
  model-training:
    build: .
    container_name: mlops-model-training
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./mlruns:/app/mlruns
      - ./logs:/app/logs
    environment:
      - PYTHONPATH=/app
    command: python src/train_and_track.py
    networks:
      - mlops-network
    depends_on:
      - data-loader

  # Housing Price Prediction API
  housing-api:
    build: .
    container_name: mlops-housing-api
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./housinglogs:/app/housinglogs
      - ./logs:/app/logs
      - shared_data:/app/shared
    environment:
      - PYTHONPATH=/app
      - SHARED_DIR=/app/shared
      - PROMETHEUS_URL=http://prometheus:9090
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    command: /app/startup.sh
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mlops-network
    depends_on:
      - prometheus
      - model-training

  # Model Retraining Service
  retraining-service:
    build: .
    container_name: mlops-retraining
    ports:
      - "8002:8002"
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./housinglogs:/app/housinglogs
      - ./mlruns:/app/mlruns
      - ./logs:/app/logs
      - shared_data:/app/shared
    environment:
      - PYTHONPATH=/app
      - SHARED_DIR=/app/shared
      - PROMETHEUS_URL=http://prometheus:9090
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    command: python src/retraining_scheduler.py
    restart: unless-stopped
    networks:
      - mlops-network
    depends_on:
      - housing-api

  # MLflow Tracking Server
  mlflow:
    image: python:3.10-slim
    container_name: mlops-mlflow
    ports:
      - "5000:5000"
    volumes:
      - ./mlruns:/app/mlruns
    working_dir: /app
    command: >
      bash -c "pip install mlflow>=2.8.0 &&
               mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri file:///app/mlruns"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mlops-network


volumes:
  prometheus_data:
  grafana_data:
  shared_data:

networks:
  mlops-network:
    driver: bridge
